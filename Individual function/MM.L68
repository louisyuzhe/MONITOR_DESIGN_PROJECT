00002000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 11/27/2018 9:35:49 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  
00001000= 49 6E 76 61 6C 69 ...      9  INVALID_COM DC.B    'Invalid command',0 ; Imply user command has no match 
00001010                            10  USER_INPUT  DS.B    90                    ; User input spaces size residing in memory
0000106A= 00                        11  END_USER_INPUT DC.B 0
0000106B                            12       
00001100                            13      ORG $1100
00001100                            14  ***ASCII to HEX***
00001100                            15  *Convert ASCII in (A4) to HEX in (D1)
00001100                            16  ASCIItoHEX:
00001100  48E7 1000                 17          MOVEM.L D3,-(A7)     ; Save register
00001104  4281                      18          CLR.L   D1           ; Clear register
00001106  4283                      19          CLR.L   D3
00001108  161C                      20          MOVE.B  (A4)+,D3     ; Save a byte from A4 to D3
0000110A  0C03 0030                 21          CMPI.B  #$30,D3      ; Check if it is ASCII
0000110E  6D00 0016                 22          BLT     A2H_END      ; Done if there isn't ASCII
00001112  6100 0050                 23  AtoHEX2 BSR     ALPHAorDIGIT ; Determine alpha/digit
00001116  D203                      24  AtoHEX3 ADD.B   D3,D1        ; Store converted HEX in D1
00001118  161C                      25          MOVE.B  (A4)+,D3     ; Save a byte from A4 to D3
0000111A  0C03 0030                 26          CMPI.B  #$30,D3      ; Check if it is ASCII
0000111E  6D00 0006                 27          BLT     A2H_END      ; Done if there isn't ASCII
00001122  E981                      28          ASL.L   #4,D1        ; Shift left to store more HEX
00001124  60EC                      29          BRA     AtoHEX2      ; LOOP the conversion
00001126  538C                      30  A2H_END SUBA.L  #1,A4        ; leave A6 pointing at byte immediately after last number
00001128  4CDF 0008                 31          MOVEM.L (A7)+,D3     ; restore registers
0000112C  4E75                      32          RTS
0000112E                            33   
0000112E                            34  *Convert ASCII in (A4) to HEX in (D1) for MM, ends when detected ';'
0000112E                            35  ASCIItoHEX_MM:
0000112E  48E7 1000                 36             MOVEM.L D3,-(A7)     ; Save register
00001132  4281                      37             CLR.L   D1           ; Clear register
00001134  4283                      38             CLR.L   D3
00001136  161C                      39             MOVE.B  (A4)+,D3     ; Save a byte from A4 to D3
00001138  0C03 0030                 40             CMPI.B  #$30,D3      ; Check if it is ASCII
0000113C  6D00 001E                 41             BLT     A2H_END_MM   ; Done if there isn't ASCII
00001140  6100 0022                 42  AtoHEX2_MM BSR     ALPHAorDIGIT ; Determine alpha/digit
00001144  D203                      43  AtoHEX3_MM ADD.B   D3,D1        ; Store converted HEX in D1
00001146  161C                      44             MOVE.B  (A4)+,D3     ; Save a byte from A4 to D3
00001148  0C03 003B                 45             CMPI.B  #';',D3      ; Check if it is ';'
0000114C  6700 000E                 46             BEQ     A2H_END_MM   ; Done if it meets ';'
00001150  0C03 0030                 47             CMPI.B  #$30,D3      ; Check if it is ASCII
00001154  6D00 0006                 48             BLT     A2H_END_MM   ; Done if there isn't ASCII
00001158  E981                      49             ASL.L   #4,D1        ; Shift left to store more HEX
0000115A  60E4                      50             BRA     AtoHEX2_MM   ; LOOP the conversion
0000115C  538C                      51  A2H_END_MM SUBA.L  #1,A4        ; leave A6 pointing at byte immediately after last number
0000115E  4CDF 0008                 52             MOVEM.L (A7)+,D3     ; restore registers
00001162  4E75                      53             RTS
00001164                            54         
00001164                            55  ALPHAorDIGIT:
00001164  0C03 0040                 56          CMPI.B  #$40,D3      ; Determine alpha/digit
00001168  6D00 0004                 57          BLT     AtoDIGIT     ; Branch to subroutine AtoDIGIT        
0000116C                            58  *Convert ASCII (D3) to Alphabets
0000116C  5F03                      59  AtoALPHA SUBI.B #$7, D3 ; for A to F
0000116E                            60  *Convert ASCII (D3) to digits
0000116E  0403 0030                 61  AtoDIGIT SUBI.B #$30,D3 ; for 0 to 9
00001172  4E75                      62           RTS
00001174                            63  
00001174                            64  ***HEX to ASCII***
00001174                            65  *Convert HEX in (D1) to ASCII starting at A1 - (# of digits * BYTE)
00001174                            66  HEXtoASCII: 
00001174  48E7 1800                 67            MOVEM.L D3/D4,-(A7) ; Save registers
00001178  2801                      68            MOVE.L  D1, D4      ; Save D1 to D4
0000117A  2604                      69  HEXtoA2   MOVE.L  D4, D3      ; Duplicate value of D4
0000117C  C6BC 0000000F             70            AND.L   #$0F,D3     ; Filter all except last digit
00001182  0C03 000A                 71            CMPI.B  #$A,D3      ; Determine Alphabet/Digit
00001186  6D00 000A                 72            BLT     DIGITtoA    ; Branch to subroutine DIGITtoA  
0000118A  0603 0037                 73  ALPHAtoA  ADDI.B  #$37, D3    ; Convert Alphabets in (D3) to ASCII for A to F
0000118E  6000 0006                 74            BRA     HEXtoA3     ; Continue to save value to -A1
00001192  0603 0030                 75  DIGITtoA  ADDI.B  #$30,D3     ; Convert Digit in (D3) to ASCII for 0 to 9                  
00001196  1303                      76  HEXtoA3   MOVE.B  D3,-(A1)    ; Save ASCII to memory
00001198  E88C                      77            LSR.L   #4,D4       ; Shift right by 1 Hex digit
0000119A  4A84                      78            TST.L   D4          ; Test value in D4
0000119C  66DC                      79            BNE     HEXtoA2     ; Loop if there is digit left
0000119E  4CDF 0018                 80  H2A_END   MOVEM.L (A7)+,D3/D4 ; Restore registers
000011A2  4E75                      81            RTS                 ; Return from Subroutine
000011A4                            82            
000011A4                            83  **Convert 8 HEX characters in (D1) to ASCII starting at A1 - (8 BYTE)
000011A4                            84  *For the 16 registers (A, D), SSW, BA, IR
000011A4                            85  HEX8toASCII: 
000011A4  48E7 3800                 86            MOVEM.L D2-D4,-(A7) ; Save registers
000011A8  2801                      87            MOVE.L  D1,D4       ; Save D1 to D4
000011AA  7408                      88            MOVE.L  #8,D2       ; Count of 8
000011AC  2604                      89  HEX8toA2  MOVE.L  D4, D3      ; Duplicate value of D4
000011AE  C6BC 0000000F             90            AND.L   #$0F,D3     ; Filter all except last digit
000011B4  0C03 000A                 91            CMPI.B  #$A,D3      ; Determine Alphabet/Digit
000011B8  6D00 000A                 92            BLT     DIGIT8toA   ; Branch to subroutine DIGITtoA  
000011BC  0603 0037                 93  ALPHA8toA ADDI.B  #$37, D3    ; Convert Alphabets in (D3) to ASCII for A to F
000011C0  6000 0006                 94            BRA     HEX8toA3    ; Continue to save value to -A1
000011C4  0603 0030                 95  DIGIT8toA ADDI.B #$30,D3      ; Convert Digit in (D3) to ASCII for 0 to 9    
000011C8  1303                      96  HEX8toA3  MOVE.B  D3,-(A1)    ; Save ASCII to memory
000011CA  E88C                      97            LSR.L   #4,D4       ; Shift right by 1 Hex digit
000011CC  5382                      98            SUBI.L  #1, D2      ; Decerement D2    
000011CE  66DC                      99            BNE     HEX8toA2    ; Loop if there is digit left
000011D0  4CDF 001C                100  H82A_END  MOVEM.L (A7)+,D2-D4 ; Restore registers
000011D4  4E75                     101            RTS                 ; Return from Subroutine 
000011D6                           102  
00002600                           103      ORG $2600          
00002600                           104  *------------------------------------ Main Program ------------------------------          
00002600                           105  ***Memory Modify***        
00002600                           106  *MM -  display memory and, as required, modify data or enter new data
00002600                           107  * The size (B,W,L) controls the number of bytes displayed for each address.
00002600                           108  MM:
00002600  48E7 E044                109          MOVEM.L D0-D2/A1/A5,-(A7)
00002604                           110          
00002604                           111          *Store address to MM at A5
00002604  538C                     112          SUBA.L  #1, A4      ; Point to first byte of user input address 
00002606  224C                     113          MOVEA.L A4,A1       ; A1 points to User Input for Writing
00002608  121C                     114          MOVE.B  (A4)+,D1    ; First byte data from user input(A4 pointer)
0000260A  0C01 0024                115          CMPI.B  #$24,D1     ; #$24 is '$', test if user input a valid address sign
0000260E  6600 015A                116          BNE     ERR_MM      ; INVALID Address for MM
00002612  6100 EB1A                117          BSR     ASCIItoHEX_MM ; D1 has 1st address(ASCII) 
00002616  2A41                     118          MOVEA.L D1, A5      ; 1st HEX addr in A5 
00002618                           119          
00002618                           120          *Determine between byte(DEFAULT), word or long size
00002618  121C                     121          MOVE.B  (A4)+,D1    ; Store the next byte in D1 to check size
0000261A  0C01 0000                122          CMPI.B  #$00,D1     ; Check if there is any size input
0000261E  6700 0028                123          BEQ     BYTE_MM     ; Use byte size MM (DEFAULT)
00002622  0C01 003B                124          CMPI.B  #';',D1     ; Check if user input semi-colon before sorting order
00002626  6600 0142                125          BNE     ERR_MM      ; INVALID command format for MM       
0000262A  1214                     126          MOVE.B  (A4),D1    ; Store the next byte in D1 to check size
0000262C  0C01 0042                127          CMPI.B  #$42,D1     ; Check if it's 'B'
00002630  6700 0016                128          BEQ     BYTE_MM     ; Use byte size MM 
00002634  0C01 0057                129          CMPI.B  #$57,D1     ; Check if it's 'W'
00002638  6700 0072                130          BEQ     WORD_MM     ; Use word size MM
0000263C  0C01 004C                131          CMPI.B  #$4C,D1     ; Check if it's 'L'
00002640  6700 00CE                132          BEQ     LONG_MM     ; Use long size MM 
00002644  6000 0124                133          BRA     ERR_MM      ; Invalid command for MM
00002648                           134          
00002648                           135          *Display BYTE memory addressing mode
00002648  43F8 106A                136  BYTE_MM LEA     END_USER_INPUT, A1  ; Empty space to store display memory and data
0000264C  133C 0000                137          MOVE.B  #$0,-(A1)   ; Null terminator
00002650  133C 003F                138          MOVE.B  #$3F,-(A1)  ; Prompt for user input with '?'
00002654  133C 0020                139          MOVE.B  #$20,-(A1)  ; similiar to SANPER
00002658  4281                     140          CLR.L   D1          ; Clear to store byte data
0000265A  1215                     141          MOVE.B  (A5),D1     ; D1 has a byte data
0000265C  6100 EB16                142          BSR     HEXtoASCII  ; Store the converted byte into output
00002660  133C 0020                143          MOVE.B  #$20,-(A1)   ; 4 empty spaces
00002664  133C 0020                144          MOVE.B  #$20,-(A1)   ; 
00002668  133C 0020                145          MOVE.B  #$20,-(A1)   ;
0000266C  133C 0020                146          MOVE.B  #$20,-(A1)   ;
00002670  220D                     147          MOVE.L  A5,D1       ; HEX addr in A5 
00002672  6100 EB30                148          BSR     HEX8toASCII ; Store ASCII addr in output
00002676  133C 0024                149          MOVE.B  #$24,-(A1)  ; Store '$' hex addr sign in output
0000267A  103C 000E                150          MOVE.B  #14,D0      ; Display memory addr and data
0000267E  4E4F                     151          TRAP    #15           
00002680  103C 0002                152          MOVE.B  #2,D0       ; Read input ans return to (A1)
00002684  4E4F                     153          TRAP    #15         
00002686  0C11 0000                154          CMPI.B  #$0,(A1)    ; Check if user input(null terminated) nothing
0000268A  6600 0006                155          BNE     BYTE_MM2    ; If user input smtg, intpret input       
0000268E  528D                     156          ADDA.L  #1,A5       ; Point to next byte data
00002690  60B6                     157          BRA     BYTE_MM     ; Proceed to next byte data
00002692                           158          
00002692                           159           *Read user input and terminate/ store input data
00002692  0C11 002E                160  BYTE_MM2 CMPI.B  #$2E,(A1)   ; Check if user enter '.' to terminate
00002696  6700 00D8                161           BEQ     END_MM      ; if yes, end MM
0000269A  2849                     162           MOVEA.L A1,A4       ; Else, point A4 to current byte data 
0000269C  6100 EA62                163           BSR     ASCIItoHEX  ; convert user input into HEX
000026A0  0C81 000000FF            164           CMPI.L  #$FF,D1     ; Check if user input more than a byte
000026A6                           165           ;BGT     ERR_MM      
000026A6  6EA0                     166           BGT     BYTE_MM     ; If yes, prompt user again  
000026A8  1AC1                     167           MOVE.B  D1,(A5)+    ; Replace it with HEX byte user input 
000026AA  609C                     168           BRA     BYTE_MM     ; Proceed to next byte data
000026AC                           169  
000026AC                           170   *Display WORD memory addressing mode
000026AC  43F8 106A                171  WORD_MM LEA     END_USER_INPUT, A1  ; Empty space to store display memory and data
000026B0  133C 0000                172          MOVE.B  #$0,-(A1)   ; Null terminator
000026B4  133C 003F                173          MOVE.B  #$3F,-(A1)  ; Prompt for user input with '?'
000026B8  133C 0020                174          MOVE.B  #$20,-(A1)  ; similiar to SANPER
000026BC  4281                     175          CLR.L   D1          ; Clear to store byte data
000026BE  3215                     176          MOVE.W  (A5),D1     ; D1 has a WORD data
000026C0  6100 EAB2                177          BSR     HEXtoASCII  ; Store the converted word  into output
000026C4  133C 0020                178          MOVE.B  #$20,-(A1)   ; 4 empty spaces
000026C8  133C 0020                179          MOVE.B  #$20,-(A1)   ; 
000026CC  133C 0020                180          MOVE.B  #$20,-(A1)   ;
000026D0  133C 0020                181          MOVE.B  #$20,-(A1)   ;
000026D4  220D                     182          MOVE.L  A5,D1       ; HEX addr in A5 
000026D6  6100 EACC                183          BSR     HEX8toASCII ; Store ASCII addr in output
000026DA  133C 0024                184          MOVE.B  #$24,-(A1)  ; Store '$' hex addr sign in output
000026DE  103C 000E                185          MOVE.B  #14,D0      ; Display memory addr and data
000026E2  4E4F                     186          TRAP    #15           
000026E4  103C 0002                187          MOVE.B  #2,D0       ; Read input ans return to (A1)
000026E8  4E4F                     188          TRAP    #15         
000026EA  0C11 0000                189          CMPI.B  #$0,(A1)    ; Check if user input(null terminated) nothing
000026EE  6600 0006                190          BNE     WORD_MM2    ; If user input smtg, intepret input       
000026F2  548D                     191          ADDA.L  #2,A5       ; Point to next word data
000026F4  60B6                     192          BRA     WORD_MM     ; Proceed to next word  data
000026F6                           193          
000026F6                           194           *Read user input and terminate/ store input data
000026F6  0C11 002E                195  WORD_MM2 CMPI.B  #$2E,(A1)   ; Check if user enter '.' to terminate
000026FA  6700 0074                196           BEQ     END_MM      ; if yes, end MM
000026FE  2849                     197           MOVEA.L A1,A4       ; Else, point A4 to current byte data 
00002700  6100 E9FE                198           BSR     ASCIItoHEX  ; convert user input into HEX
00002704  0C81 0000FFFF            199           CMPI.L  #$FFFF,D1   ; Check if user input more than a word   
0000270A  6EA0                     200           BGT     WORD_MM     ; If yes, prompt user again  
0000270C  3AC1                     201           MOVE.W  D1,(A5)+    ; Replace it with HEX word user input 
0000270E  609C                     202           BRA     WORD_MM     ; Proceed to next word data
00002710                           203  
00002710                           204  *Display LONG memory addressing mode
00002710  43F8 106A                205  LONG_MM LEA     END_USER_INPUT, A1  ; Empty space to store display memory and data
00002714  133C 0000                206          MOVE.B  #$0,-(A1)   ; Null terminator
00002718  133C 003F                207          MOVE.B  #$3F,-(A1)  ; Prompt for user input with '?'
0000271C  133C 0020                208          MOVE.B  #$20,-(A1)  ; similiar to SANPER
00002720  2215                     209          MOVE.L  (A5),D1     ; D1 has a LONG data
00002722  6100 EA80                210          BSR     HEX8toASCII  ; Store the converted long into output
00002726  133C 0020                211          MOVE.B  #$20,-(A1)   ; 4 empty spaces
0000272A  133C 0020                212          MOVE.B  #$20,-(A1)   ; 
0000272E  133C 0020                213          MOVE.B  #$20,-(A1)   ;
00002732  133C 0020                214          MOVE.B  #$20,-(A1)   ;
00002736  220D                     215          MOVE.L  A5,D1       ; HEX addr in A5 
00002738  6100 EA6A                216          BSR     HEX8toASCII ; Store ASCII addr in output
0000273C  133C 0024                217          MOVE.B  #$24,-(A1)  ; Store '$' hex addr sign in output
00002740  103C 000E                218          MOVE.B  #14,D0      ; Display memory addr and data
00002744  4E4F                     219          TRAP    #15           
00002746  103C 0002                220          MOVE.B  #2,D0       ; Read input ans return to (A1)
0000274A  4E4F                     221          TRAP    #15         
0000274C  0C11 0000                222          CMPI.B  #$0,(A1)    ; Check if user input(null terminated) nothing
00002750  6600 0006                223          BNE     LONG_MM2    ; If user input smtg, interpret input       
00002754  588D                     224          ADDA.L  #4,A5       ; Point to next LONGd data
00002756  60B8                     225          BRA     LONG_MM     ; Proceed to next LONG data
00002758                           226          
00002758                           227           *Read user input and terminate/ store input data
00002758  0C11 002E                228  LONG_MM2 CMPI.B  #$2E,(A1)   ; Check if user enter '.' to terminate
0000275C  6700 0012                229           BEQ     END_MM      ; if yes, end MM
00002760  2849                     230           MOVEA.L A1,A4       ; Else, point A4 to current LONG data 
00002762  6100 0012                231           BSR     ASCtoHEX_MM  ; convert user input into HEX
00002766                           232          
00002766                           233           ;MOVE.L  #$FFFFFFFF,D2 ; To be used for checking user input   
00002766                           234           ;CMP.L   D1,D2       ; Check if user input more than a long   
00002766                           235           ;BGT     LONG_MM     ; If yes, prompt user again 
00002766                           236           
00002766  2AC1                     237           MOVE.L  D1,(A5)+    ; Replace it with HEX LONG user input 
00002768  60A6                     238           BRA     LONG_MM     ; Proceed to next LONG data
0000276A                           239  
0000276A  4EB9 000027B2            240  ERR_MM  JSR    CMD_INVALID        ; Go to invalid command subroutine
00002770  4CDF 2207                241  END_MM  MOVEM.L (A7)+,D0-D2/A1/A5 ; Restore REGs
00002774  4E75                     242          RTS      
00002776                           243  
00002776                           244  ***ASCII to HEX for MM***
00002776                           245  *Convert ASCII in (A4) to HEX in (D1)
00002776                           246  *Prompt user again if if user input more than a long 
00002776                           247  ASCtoHEX_MM:
00002776  48E7 1000                248          MOVEM.L D3,-(A7)     ; Save register
0000277A  4281                     249          CLR.L   D1           ; Clear register
0000277C  4283                     250          CLR.L   D3
0000277E  4282                     251          CLR.L   D2           ; count 8 times
00002780  161C                     252          MOVE.B  (A4)+,D3     ; Save a byte from A4 to D3
00002782  0C03 0030                253          CMPI.B  #$30,D3      ; Check if it is ASCII
00002786  6D00 0022                254          BLT     AM2H_END     ; Done if there isn't ASCII
0000278A  6100 E9D8                255  AMtoHEX2 BSR     ALPHAorDIGIT ; Determine alpha/digit
0000278E  0C82 00000008            256  AMtoHEX3 CMPI.L  #8,D2       ; Check if user input more than a long   
00002794  6700 FF7A                257          BEQ     LONG_MM      ; prompt user again 
00002798  D203                     258          ADD.B   D3,D1        ; Store converted HEX in D1
0000279A  161C                     259          MOVE.B  (A4)+,D3     ; Save a byte from A4 to D3
0000279C  0C03 0030                260          CMPI.B  #$30,D3      ; Check if it is ASCII
000027A0  6D00 0008                261          BLT     AM2H_END     ; Done if there isn't ASCII
000027A4  E981                     262          ASL.L   #4,D1        ; Shift left to store more HEX
000027A6  5202                     263          ADDQ.B  #1,D2        ; Count the amount of HEX
000027A8  60E0                     264          BRA     AMtoHEX2     ; LOOP the conversion
000027AA  538C                     265  AM2H_END SUBA.L  #1,A4       ; leave A6 pointing at byte immediately after last number
000027AC  4CDF 0008                266          MOVEM.L (A7)+,D3     ; restore registers
000027B0  4E75                     267          RTS
000027B2                           268          
000027B2                           269  *-----------------------------------Default----------------------------------       
000027B2                           270  *Prompt user when command is invalid
000027B2                           271  CMD_INVALID:
000027B2  48E7 8040                272         MOVEM.L D0/A1, -(A7)    ; Save REGs
000027B6  43F8 1000                273         LEA     INVALID_COM, A1 ; Display error message
000027BA  103C 000D                274         MOVE.B  #13,D0
000027BE  4E4F                     275         TRAP    #15
000027C0  4CDF 0201                276         MOVEM.L (A7)+,D0/A1     ; Restore REGs
000027C4  4E75                     277         RTS
000027C6                           278       
000027C6                           279  * Put variables and constants here
00002300                           280      ORG    $2300
00002300                           281  ;TEST1 DC.B    '$2400',0 ; Store testcase in input space
00002300                           282  ;TEST1 DC.B    '$2400;B',0 ; Store testcase in input space
00002300                           283  ;TEST1 DC.B    '$2400;W',0 ; Store testcase in input space
00002300= 24 32 34 30 30 3B ...    284  TEST1 DC.B    '$2400;L',0 ; Store testcase in input space
00002308                           285  
00002308                           286  
00002308  =00002FFC                287  STACK   EQU $2FFC       ; A7 will be stored at $3000 - $4
00002308                           288  
00002400                           289      ORG $2400
00002400= 30 30 30 30 30 30 ...    290  TEST1A   DC.B    '0000000100000002',0
00002411                           291  
00002000                           292      ORG $2000
00002000                           293  START:                  ; first instruction of program
00002000  287C 00002301            294      MOVEA.L #$2301, A4
00002006  6000 05F8                295      BRA     MM 
0000200A                           296      ;MOVEA.L #$2601, A4
0000200A                           297      ;BRA     MDSP   
0000200A                           298      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A2H_END             1126
A2H_END_MM          115C
ALPHA8TOA           11BC
ALPHAORDIGIT        1164
ALPHATOA            118A
AM2H_END            27AA
AMTOHEX2            278A
AMTOHEX3            278E
ASCIITOHEX          1100
ASCIITOHEX_MM       112E
ASCTOHEX_MM         2776
ATOALPHA            116C
ATODIGIT            116E
ATOHEX2             1112
ATOHEX2_MM          1140
ATOHEX3             1116
ATOHEX3_MM          1144
BYTE_MM             2648
BYTE_MM2            2692
CMD_INVALID         27B2
DIGIT8TOA           11C4
DIGITTOA            1192
END_MM              2770
END_USER_INPUT      106A
ERR_MM              276A
H2A_END             119E
H82A_END            11D0
HEX8TOA2            11AC
HEX8TOA3            11C8
HEX8TOASCII         11A4
HEXTOA2             117A
HEXTOA3             1196
HEXTOASCII          1174
INVALID_COM         1000
LONG_MM             2710
LONG_MM2            2758
MM                  2600
STACK               2FFC
START               2000
TEST1               2300
TEST1A              2400
USER_INPUT          1010
WORD_MM             26AC
WORD_MM2            26F6
