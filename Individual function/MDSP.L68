00002000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 11/27/2018 7:35:53 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  
00001000= 49 6E 76 61 6C 69 ...      9  INVALID_COM DC.B    'Invalid command',0 ; Imply user command has no match 
00001010                            10  
00001010                            11       
00001100                            12      ORG $1100
00001100                            13  ***ASCII to HEX***
00001100                            14  *Convert ASCII in (A4) to HEX in (D1)
00001100                            15  ASCIItoHEX:
00001100  48E7 1000                 16          MOVEM.L D3,-(A7)     ; Save register
00001104  4281                      17          CLR.L   D1           ; Clear register
00001106  4283                      18          CLR.L   D3
00001108  161C                      19          MOVE.B  (A4)+,D3     ; Save a byte from A4 to D3
0000110A  0C03 0030                 20          CMPI.B  #$30,D3      ; Check if it is ASCII
0000110E  6D00 0016                 21          BLT     A2H_END      ; Done if there isn't ASCII
00001112  6100 001A                 22  AtoHEX2 BSR     ALPHAorDIGIT ; Determine alpha/digit
00001116  D203                      23  AtoHEX3 ADD.B   D3,D1        ; Store converted HEX in D1
00001118  161C                      24          MOVE.B  (A4)+,D3     ; Save a byte from A4 to D3
0000111A  0C03 0030                 25          CMPI.B  #$30,D3      ; Check if it is ASCII
0000111E  6D00 0006                 26          BLT     A2H_END      ; Done if there isn't ASCII
00001122  E981                      27          ASL.L   #4,D1        ; Shift left to store more HEX
00001124  60EC                      28          BRA     AtoHEX2      ; LOOP the conversion
00001126  538C                      29  A2H_END SUBA.L  #1,A4        ; leave A6 pointing at byte immediately after last number
00001128  4CDF 0008                 30          MOVEM.L (A7)+,D3     ; restore registers
0000112C  4E75                      31          RTS
0000112E                            32          
0000112E                            33  ALPHAorDIGIT:
0000112E  0C03 0040                 34          CMPI.B  #$40,D3      ; Determine alpha/digit
00001132  6D00 0004                 35          BLT     AtoDIGIT     ; Branch to subroutine AtoDIGIT        
00001136                            36  *Convert ASCII (D3) to Alphabets
00001136  5F03                      37  AtoALPHA SUBI.B #$7, D3 ; for A to F
00001138                            38  *Convert ASCII (D3) to digits
00001138  0403 0030                 39  AtoDIGIT SUBI.B #$30,D3 ; for 0 to 9
0000113C  4E75                      40           RTS
0000113E                            41  
0000113E                            42  ***HEX to ASCII***
0000113E                            43  *Convert HEX in (D1) to ASCII starting at A1 - (# of digits * BYTE)
0000113E                            44  HEXtoASCII: 
0000113E  48E7 1800                 45            MOVEM.L D3/D4,-(A7) ; Save registers
00001142  2801                      46            MOVE.L  D1, D4      ; Save D1 to D4
00001144  2604                      47  HEXtoA2   MOVE.L  D4, D3      ; Duplicate value of D4
00001146  C6BC 0000000F             48            AND.L   #$0F,D3     ; Filter all except last digit
0000114C  0C03 000A                 49            CMPI.B  #$A,D3      ; Determine Alphabet/Digit
00001150  6D00 000A                 50            BLT     DIGITtoA    ; Branch to subroutine DIGITtoA  
00001154  0603 0037                 51  ALPHAtoA  ADDI.B  #$37, D3    ; Convert Alphabets in (D3) to ASCII for A to F
00001158  6000 0006                 52            BRA     HEXtoA3     ; Continue to save value to -A1
0000115C  0603 0030                 53  DIGITtoA  ADDI.B  #$30,D3     ; Convert Digit in (D3) to ASCII for 0 to 9                  
00001160  1303                      54  HEXtoA3   MOVE.B  D3,-(A1)    ; Save ASCII to memory
00001162  E88C                      55            LSR.L   #4,D4       ; Shift right by 1 Hex digit
00001164  4A84                      56            TST.L   D4          ; Test value in D4
00001166  66DC                      57            BNE     HEXtoA2     ; Loop if there is digit left
00001168  4CDF 0018                 58  H2A_END   MOVEM.L (A7)+,D3/D4 ; Restore registers
0000116C  4E75                      59            RTS                 ; Return from Subroutine
0000116E                            60  
0000116E                            61  **Convert 8 HEX characters in (D1) to ASCII starting at A1 - (8 BYTE)
0000116E                            62  *For the 16 registers (A, D), SSW, BA, IR
0000116E                            63  HEX8toASCII: 
0000116E  48E7 3800                 64            MOVEM.L D2-D4,-(A7) ; Save registers
00001172  2801                      65            MOVE.L  D1,D4       ; Save D1 to D4
00001174  7408                      66            MOVE.L  #8,D2       ; Count of 8
00001176  2604                      67  HEX8toA2  MOVE.L  D4, D3      ; Duplicate value of D4
00001178  C6BC 0000000F             68            AND.L   #$0F,D3     ; Filter all except last digit
0000117E  0C03 000A                 69            CMPI.B  #$A,D3      ; Determine Alphabet/Digit
00001182  6D00 000A                 70            BLT     DIGIT8toA   ; Branch to subroutine DIGITtoA  
00001186  0603 0037                 71  ALPHA8toA ADDI.B  #$37, D3    ; Convert Alphabets in (D3) to ASCII for A to F
0000118A  6000 0006                 72            BRA     HEX8toA3    ; Continue to save value to -A1
0000118E  0603 0030                 73  DIGIT8toA ADDI.B #$30,D3      ; Convert Digit in (D3) to ASCII for 0 to 9    
00001192  1303                      74  HEX8toA3  MOVE.B  D3,-(A1)    ; Save ASCII to memory
00001194  E88C                      75            LSR.L   #4,D4       ; Shift right by 1 Hex digit
00001196  5382                      76            SUBI.L  #1, D2      ; Decerement D2    
00001198  66DC                      77            BNE     HEX8toA2    ; Loop if there is digit left
0000119A  4CDF 001C                 78  H82A_END  MOVEM.L (A7)+,D2-D4 ; Restore registers
0000119E  4E75                      79            RTS                 ; Return from Subroutine 
000011A0                            80            
000011A0                            81  **Convert 2 HEX characters in (D1) to ASCII starting at A1 - (4 BYTE)
000011A0                            82  *For the SR
000011A0                            83  HEX2toASCII: 
000011A0  48E7 3800                 84            MOVEM.L D2-D4,-(A7) ; Save registers
000011A4  2801                      85            MOVE.L  D1,D4       ; Save D1 to D4
000011A6  7402                      86            MOVE.L  #2,D2       ; Count of 4
000011A8  2604                      87  HEX2toA2  MOVE.L  D4, D3      ; Duplicate value of D4
000011AA  C6BC 0000000F             88            AND.L   #$0F,D3     ; Filter all except last digit
000011B0  0C03 000A                 89            CMPI.B  #$A,D3      ; Determine Alphabet/Digit
000011B4  6D00 000A                 90            BLT     DIGIT2toA   ; Branch to subroutine DIGITtoA  
000011B8  0603 0037                 91  ALPHA2toA ADDI.B  #$37, D3    ; Convert Alphabets in (D3) to ASCII for A to F
000011BC  6000 0006                 92            BRA     HEX2toA3    ; Continue to save value to -A1
000011C0  0603 0030                 93  DIGIT2toA ADDI.B  #$30,D3     ; Convert Digit in (D3) to ASCII for 0 to 9      
000011C4  1303                      94  HEX2toA3  MOVE.B  D3,-(A1)    ; Save ASCII to memory
000011C6  E88C                      95            LSR.L   #4,D4       ; Shift right by 1 Hex digit
000011C8  5382                      96            SUBI.L  #1, D2      ; Decrement D2    
000011CA  66DC                      97            BNE     HEX2toA2    ; Loop if there is digit left
000011CC  4CDF 001C                 98  H22A_END  MOVEM.L (A7)+,D2-D4 ; Restore registers
000011D0  4E75                      99            RTS                 ; Return from Subroutine
000011D2                           100            
000011D2                           101  ***Memory Display***        
000011D2                           102  *MDSP - outputs the address and memory contents <address1> to <address2>
000011D2                           103  *Default: outputs the address and memory contents <address1> to <address1 + 16bytes>
000011D2                           104  MDSP:
000011D2  48E7 8046                105         MOVEM.L D0/A1/A5-A6,-(A7)     
000011D6                           106         *Store addr1 in A5
000011D6  538C                     107         SUBA.L  #1, A4       ; Point to first byte of user input address 
000011D8  121C                     108         MOVE.B  (A4)+,D1     ; First byte data from user input(A4 pointer)
000011DA  0C01 0024                109         CMPI.B  #$24,D1      ; #$24 is '$', test if user input a valid address sign
000011DE  6600 0064                110         BNE     ERR_MDSP     ; INVALID Address for BTST
000011E2  6100 FF1C                111         BSR     ASCIItoHEX   ; D1 has 1st address(ASCII) 
000011E6  2A41                     112         MOVEA.L D1, A5       ; 1st HEX addr in A5 
000011E8                           113         
000011E8                           114         *Check If there's a second address, if yes, store addr2 in A6
000011E8  121C                     115         MOVE.B  (A4)+,D1     ; Store the next byte in D1 to check blank space
000011EA  0C01 0020                116         CMPI.B  #$20,D1      ; Check if user input blank space before Next address
000011EE  6600 0016                117         BNE     NO_ADDR2     ; INVALID Command format for BTST  
000011F2  121C                     118         MOVE.B  (A4)+,D1     ; One byte data from user input(A4 pointer)
000011F4  0C01 0024                119         CMPI.B  #$24,D1      ; #$24 is '$', test if user input a valid address sign
000011F8  6600 004A                120         BNE     ERR_MDSP     ; INVALID Address for BTST
000011FC  6100 FF02                121         BSR     ASCIItoHEX   ; D1 has 2nd address(ASCII)         
00001200  2C41                     122         MOVEA.L D1,A6        ; 2nd HEX addr in A6 
00001202  6000 000A                123         BRA     MDSP2
00001206                           124         
00001206                           125           *If no input addr2, addr2 = addr1 + 16 bytes
00001206  2C4D                     126  NO_ADDR2 MOVEA.L A5,A6      ; make a copy of addr1
00001208  DDFC 0000000F            127           ADDA.L  #15,A6     ; Add 15 more bytes to addr1(first byte is counted)
0000120E                           128         *Outputs the address and memory contents from A5 to A6
0000120E  BDCD                     129  MDSP2  CMPA.L  A5, A6       ; Compare if A5 is at A6 (A6-A5), 
00001210  6D00 0038                130         BLT     END_MDSP     ; If A5 is at A6, go to to next loop
00001214  43F9 00002FFC            131         LEA     STACK, A1    ; Use STACK to store byte tobe printed out
0000121A  93FC 00000050            132         SUBA.L  #$50,A1      ; Skip spaces to prevent stack overflow
00001220  133C 0000                133         MOVE.B  #$00,-(A1)   ; Null terminator
00001224  4281                     134         CLR.L   D1           ; Clear to store byte data
00001226  1215                     135         MOVE.B  (A5), D1     ; Memory content to be converted
00001228  6100 FF76                136         BSR     HEX2toASCII 
0000122C  133C 0020                137         MOVE.B  #$20,-(A1)   ; Blank space
00001230  133C 0020                138         MOVE.B  #$20,-(A1)   ; Blank space 
00001234  320D                     139         MOVE.W  A5, D1       ; Address to be converted
00001236  6100 FF06                140         BSR     HEXtoASCII  ; Convert Address to ASCII
0000123A  103C 000D                141         MOVE.B  #13,D0       ; Display the address and memory contents
0000123E  4E4F                     142         TRAP    #15             
00001240  528D                     143         ADDQ.L  #1, A5       ; Go to next byte addr 
00001242  60CA                     144         BRA     MDSP2        ; Continue Loop
00001244                           145         
00001244  4EB9 00001250            146  ERR_MDSP JSR    CMD_INVALID  ; Go to invalid command subroutine       
0000124A  4CDF 6201                147  END_MDSP MOVEM.L (A7)+,D0/A1/A5-A6 ;Restore used Register
0000124E  4E75                     148           RTS
00001250                           149           
00001250                           150  *Prompt user when command is invalid
00001250                           151  CMD_INVALID:
00001250  48E7 8040                152         MOVEM.L D0/A1, -(A7)    ; Save REGs
00001254  43F8 1000                153         LEA     INVALID_COM, A1 ; Display error message
00001258  103C 000D                154         MOVE.B  #13,D0
0000125C  4E4F                     155         TRAP    #15
0000125E  4CDF 0201                156         MOVEM.L (A7)+,D0/A1     ; Restore REGs
00001262  4E75                     157         RTS
00001264                           158       
00001264                           159  * Put variables and constants here
00002300                           160      ORG    $2300
00002300= 24 32 34 30 30 20 ...    161  TEST1 DC.B    '$2400 $240A ',0 ; Store testcase in input space
0000230D  =00002FFC                162  STACK   EQU $2FFC       ; A7 will be stored at $3000 - $4
00002600                           163      ORG    $2600
00002600= 24 32 35 30 30 00        164  TEST2 DC.B    '$2500',0 ; Store testcase in input space
00002606                           165  
00002400                           166      ORG $2400
00002400= 41 42 43 44 45 46 ...    167  TEST1A   DC.B    'ABCDEFGH',0
00002500                           168      ORG $2500
00002500= 30 30 30 31 41 42 ...    169  TEST2A   DC.B    '0001ABC4GHCCCCCC',0
00002511                           170  
00002000                           171      ORG $2000
00002000                           172  START:                  ; first instruction of program
00002000                           173      ;MOVEA.L #$2301, A4
00002000                           174      ;BRA     MDSP 
00002000  287C 00002601            175      MOVEA.L #$2601, A4
00002006  6000 F1CA                176      BRA     MDSP   
0000200A                           177      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A2H_END             1126
ALPHA2TOA           11B8
ALPHA8TOA           1186
ALPHAORDIGIT        112E
ALPHATOA            1154
ASCIITOHEX          1100
ATOALPHA            1136
ATODIGIT            1138
ATOHEX2             1112
ATOHEX3             1116
CMD_INVALID         1250
DIGIT2TOA           11C0
DIGIT8TOA           118E
DIGITTOA            115C
END_MDSP            124A
ERR_MDSP            1244
H22A_END            11CC
H2A_END             1168
H82A_END            119A
HEX2TOA2            11A8
HEX2TOA3            11C4
HEX2TOASCII         11A0
HEX8TOA2            1176
HEX8TOA3            1192
HEX8TOASCII         116E
HEXTOA2             1144
HEXTOA3             1160
HEXTOASCII          113E
INVALID_COM         1000
MDSP                11D2
MDSP2               120E
NO_ADDR2            1206
STACK               2FFC
START               2000
TEST1               2300
TEST1A              2400
TEST2               2600
TEST2A              2500
