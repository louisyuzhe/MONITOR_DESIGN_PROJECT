00002000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 11/24/2018 10:15:14 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  
00001000= 49 6E 76 61 6C 69 ...      9  INVALID_COM DC.B    'Invalid command',0 ; Imply user command has no match   
00001010                            10  ***ASCII to HEX***
00001010                            11  *Convert ASCII in (A4) to HEX in (D1)
00001010                            12  ASCIItoHEX:
00001010  48E7 1000                 13          MOVEM.L D3,-(A7)     ; Save register
00001014  4281                      14          CLR.L   D1           ; Clear register
00001016  4283                      15          CLR.L   D3
00001018  161C                      16          MOVE.B  (A4)+,D3     ; Save a byte from A4 to D3
0000101A  0C03 0030                 17          CMPI.B  #$30,D3      ; Check if it is ASCII
0000101E  6D00 0016                 18          BLT     A2H_END      ; Done if there isn't ASCII
00001022  6100 001A                 19  AtoHEX2 BSR     ALPHAorDIGIT ; Determine alpha/digit
00001026  D203                      20  AtoHEX3 ADD.B   D3,D1        ; Store converted HEX in D1
00001028  161C                      21          MOVE.B  (A4)+,D3     ; Save a byte from A4 to D3
0000102A  0C03 0030                 22          CMPI.B  #$30,D3      ; Check if it is ASCII
0000102E  6D00 0006                 23          BLT     A2H_END      ; Done if there isn't ASCII
00001032  E981                      24          ASL.L   #4,D1        ; Shift left to store more HEX
00001034  60EC                      25          BRA     AtoHEX2      ; LOOP the conversion
00001036  538C                      26  A2H_END SUBA.L  #1,A4        ; leave A6 pointing at byte immediately after last number
00001038  4CDF 0008                 27          MOVEM.L (A7)+,D3     ; restore registers
0000103C  4E75                      28          RTS
0000103E                            29          
0000103E                            30  ALPHAorDIGIT:
0000103E  0C03 0040                 31          CMPI.B  #$40,D3      ; Determine alpha/digit
00001042  6D00 0004                 32          BLT     AtoDIGIT     ; Branch to subroutine AtoDIGIT        
00001046                            33  *Convert ASCII (D3) to Alphabets
00001046  5F03                      34  AtoALPHA SUBI.B #$7, D3 ; for A to F
00001048                            35  *Convert ASCII (D3) to digits
00001048  0403 0030                 36  AtoDIGIT SUBI.B #$30,D3 ; for 0 to 9
0000104C  4E75                      37           RTS
0000104E                            38  
0000104E                            39  
0000104E                            40  ***Block Move***        
0000104E                            41  *BMOV -  Moves A Block Of Memory To Another Area
0000104E                            42  *BMOV <Addr1> <Addr2> <Addr3> eg: BMOV $ $ $<CR>
0000104E                            43  *Loop is not need for only 3 addr as the ' ' between addr have to be taken account
0000104E                            44  BMOV:   
0000104E  48E7 4026                 45           MOVEM.L D1/A2/A5-A6,-(A7)
00001052  538C                      46           SUBA.L  #1, A4    ; Point to first byte of user input address     
00001054                            47          
00001054                            48           *Store 1st address in A5 and skip the blank space after it
00001054  121C                      49           MOVE.B  (A4)+,D1     ; First byte data from user input(A4 pointer)
00001056  0C01 0024                 50           CMPI.B  #$24,D1      ; #$24 is '$', test if user input a valid address sign
0000105A  6600 0040                 51           BNE     ERR_BMOV     ; INVALID Address for BMOV
0000105E  61B0                      52           BSR     ASCIItoHEX   ; D1 has 1st address(ASCII) to be converted
00001060  2A41                      53           MOVEA.L D1,A5        ; 1st HEX addr in A5  
00001062  121C                      54           MOVE.B  (A4)+,D1     ; Store the next byte in D1 to check blank space
00001064  0C01 0020                 55           CMPI.B  #$20,D1      ; Check if user input blank space before Next address
00001068  6600 0032                 56           BNE     ERR_BMOV     ; INVALID Command format for BMOV
0000106C                            57          
0000106C                            58           *Store 2nd address in A6 and skip the blank space after it
0000106C  121C                      59           MOVE.B  (A4)+,D1     ; another byte data from user input(A4 pointer)
0000106E  0C01 0024                 60           CMPI.B  #$24,D1      ; #$24 is '$', test if user input a valid address sign
00001072  6600 0028                 61           BNE     ERR_BMOV     ; INVALID Address for BMOV
00001076  6198                      62           BSR     ASCIItoHEX   ; D1 has 2nd address(ASCII) to be converted
00001078  2C41                      63           MOVE.L  D1,A6        ; 2nd HEX addr in A6      
0000107A  121C                      64           MOVE.B  (A4)+,D1     ; Store the next byte in D1 to check blank space
0000107C  0C01 0020                 65           CMPI.B  #$20,D1      ; Check if user input blank space before Next address
00001080  6600 001A                 66           BNE     ERR_BMOV     ; INVALID Command format for BMOV
00001084                            67       
00001084                            68           *Store 3rd address in A2
00001084  121C                      69           MOVE.B  (A4)+,D1     ; another byte data from user input(A4 pointer)
00001086  0C01 0024                 70           CMPI.B  #$24,D1      ; #$24 is '$', test if user input a valid address sign
0000108A  6600 0010                 71           BNE     ERR_BMOV     ; INVALID Address for BMOV
0000108E  6180                      72           BSR     ASCIItoHEX   ; D1 has 2nd address(ASCII) to be converted
00001090  2441                      73           MOVE.L  D1,A2        ; 2nd HEX addr in A2
00001092                            74  
00001092  BDCD                      75  LOOPBMOV CMPA.L  A5,A6        ; Compare if A5 is at A6 (A6-A5), 
00001094                            76                                ; Compare first, incase user input same addresses
00001094  6F00 000A                 77           BLE     END_BMOV     ; If not, keep looping
00001098  14DD                      78           MOVE.B  (A5)+,(A2)+  ; Moves A Block Of Memory, (A5) To (A2)
0000109A  60F6                      79           BRA     LOOPBMOV 
0000109C                            80          
0000109C  6100 0008                 81  ERR_BMOV BSR     CMD_INVALID ; Display invalid command error msg    
000010A0  4CDF 6402                 82  END_BMOV MOVEM.L (A7)+,D1/A2/A5-A6
000010A4  4E75                      83           RTS    
000010A6                            84        
000010A6                            85          
000010A6                            86  
000010A6                            87          
000010A6                            88  *Prompt user when command is invalid
000010A6                            89  CMD_INVALID:
000010A6  48E7 8040                 90         MOVEM.L D0/A1, -(A7)    ; Save REGs
000010AA  43F8 1000                 91         LEA     INVALID_COM, A1 ; Display error message
000010AE  103C 000D                 92         MOVE.B  #13,D0
000010B2  4E4F                      93         TRAP    #15
000010B4  4CDF 0201                 94         MOVEM.L (A7)+,D0/A1     ; Restore REGs
000010B8  4E75                      95         RTS
000010BA                            96    
000010BA                            97  * Put variables and constants here
00002000                            98      ORG $2000
00002000                            99  START:                  ; first instruction of program
00002000  287C 00002301            100      MOVEA.L #$2301, A4
00002006  6100 F046                101      BSR      BMOV 
0000200A                           102         
0000200A                           103      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A2H_END             1036
ALPHAORDIGIT        103E
ASCIITOHEX          1010
ATOALPHA            1046
ATODIGIT            1048
ATOHEX2             1022
ATOHEX3             1026
BMOV                104E
CMD_INVALID         10A6
END_BMOV            10A0
ERR_BMOV            109C
INVALID_COM         1000
LOOPBMOV            1092
START               2000
