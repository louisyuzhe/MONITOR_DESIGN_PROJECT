00002000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 11/27/2018 8:08:23 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  
00001000= 49 6E 76 61 6C 69 ...      9  INVALID_COM DC.B    'Invalid command',0 ; Imply user command has no match 
00001010                            10       
00001200                            11      ORG $1200
00001200                            12  ***ASCII to HEX***
00001200                            13  *Convert ASCII in (A4) to HEX in (D1)
00001200                            14  ASCIItoHEX:
00001200  48E7 1000                 15          MOVEM.L D3,-(A7)     ; Save register
00001204  4281                      16          CLR.L   D1           ; Clear register
00001206  4283                      17          CLR.L   D3
00001208  161C                      18          MOVE.B  (A4)+,D3     ; Save a byte from A4 to D3
0000120A  0C03 0030                 19          CMPI.B  #$30,D3      ; Check if it is ASCII
0000120E  6D00 0016                 20          BLT     A2H_END      ; Done if there isn't ASCII
00001212  6100 001A                 21  AtoHEX2 BSR     ALPHAorDIGIT ; Determine alpha/digit
00001216  D203                      22  AtoHEX3 ADD.B   D3,D1        ; Store converted HEX in D1
00001218  161C                      23          MOVE.B  (A4)+,D3     ; Save a byte from A4 to D3
0000121A  0C03 0030                 24          CMPI.B  #$30,D3      ; Check if it is ASCII
0000121E  6D00 0006                 25          BLT     A2H_END      ; Done if there isn't ASCII
00001222  E981                      26          ASL.L   #4,D1        ; Shift left to store more HEX
00001224  60EC                      27          BRA     AtoHEX2      ; LOOP the conversion
00001226  538C                      28  A2H_END SUBA.L  #1,A4        ; leave A6 pointing at byte immediately after last number
00001228  4CDF 0008                 29          MOVEM.L (A7)+,D3     ; restore registers
0000122C  4E75                      30          RTS
0000122E                            31          
0000122E                            32  ALPHAorDIGIT:
0000122E  0C03 0040                 33          CMPI.B  #$40,D3      ; Determine alpha/digit
00001232  6D00 0004                 34          BLT     AtoDIGIT     ; Branch to subroutine AtoDIGIT        
00001236                            35  *Convert ASCII (D3) to Alphabets
00001236  5F03                      36  AtoALPHA SUBI.B #$7, D3 ; for A to F
00001238                            37  *Convert ASCII (D3) to digits
00001238  0403 0030                 38  AtoDIGIT SUBI.B #$30,D3 ; for 0 to 9
0000123C  4E75                      39           RTS
0000123E                            40  
0000123E                            41  ***HEX to ASCII***
0000123E                            42  *Convert HEX in (D1) to ASCII starting at A1 - (# of digits * BYTE)
0000123E                            43  HEXtoASCII: 
0000123E  48E7 1800                 44            MOVEM.L D3/D4,-(A7) ; Save registers
00001242  2801                      45            MOVE.L  D1, D4      ; Save D1 to D4
00001244  2604                      46  HEXtoA2   MOVE.L  D4, D3      ; Duplicate value of D4
00001246  C6BC 0000000F             47            AND.L   #$0F,D3     ; Filter all except last digit
0000124C  0C03 000A                 48            CMPI.B  #$A,D3      ; Determine Alphabet/Digit
00001250  6D00 000A                 49            BLT     DIGITtoA    ; Branch to subroutine DIGITtoA  
00001254  0603 0037                 50  ALPHAtoA  ADDI.B  #$37, D3    ; Convert Alphabets in (D3) to ASCII for A to F
00001258  6000 0006                 51            BRA     HEXtoA3     ; Continue to save value to -A1
0000125C  0603 0030                 52  DIGITtoA  ADDI.B  #$30,D3     ; Convert Digit in (D3) to ASCII for 0 to 9                  
00001260  1303                      53  HEXtoA3   MOVE.B  D3,-(A1)    ; Save ASCII to memory
00001262  E88C                      54            LSR.L   #4,D4       ; Shift right by 1 Hex digit
00001264  4A84                      55            TST.L   D4          ; Test value in D4
00001266  66DC                      56            BNE     HEXtoA2     ; Loop if there is digit left
00001268  4CDF 0018                 57  H2A_END   MOVEM.L (A7)+,D3/D4 ; Restore registers
0000126C  4E75                      58            RTS                 ; Return from Subroutine
0000126E                            59  
0000126E                            60  **Convert 8 HEX characters in (D1) to ASCII starting at A1 - (8 BYTE)
0000126E                            61  *For the 16 registers (A, D), SSW, BA, IR
0000126E                            62  HEX8toASCII: 
0000126E  48E7 3800                 63            MOVEM.L D2-D4,-(A7) ; Save registers
00001272  2801                      64            MOVE.L  D1,D4       ; Save D1 to D4
00001274  7408                      65            MOVE.L  #8,D2       ; Count of 8
00001276  2604                      66  HEX8toA2  MOVE.L  D4, D3      ; Duplicate value of D4
00001278  C6BC 0000000F             67            AND.L   #$0F,D3     ; Filter all except last digit
0000127E  0C03 000A                 68            CMPI.B  #$A,D3      ; Determine Alphabet/Digit
00001282  6D00 000A                 69            BLT     DIGIT8toA   ; Branch to subroutine DIGITtoA  
00001286  0603 0037                 70  ALPHA8toA ADDI.B  #$37, D3    ; Convert Alphabets in (D3) to ASCII for A to F
0000128A  6000 0006                 71            BRA     HEX8toA3    ; Continue to save value to -A1
0000128E  0603 0030                 72  DIGIT8toA ADDI.B #$30,D3      ; Convert Digit in (D3) to ASCII for 0 to 9    
00001292  1303                      73  HEX8toA3  MOVE.B  D3,-(A1)    ; Save ASCII to memory
00001294  E88C                      74            LSR.L   #4,D4       ; Shift right by 1 Hex digit
00001296  5382                      75            SUBI.L  #1, D2      ; Decerement D2    
00001298  66DC                      76            BNE     HEX8toA2    ; Loop if there is digit left
0000129A  4CDF 001C                 77  H82A_END  MOVEM.L (A7)+,D2-D4 ; Restore registers
0000129E  4E75                      78            RTS                 ; Return from Subroutine 
000012A0                            79            
000012A0                            80  ***Block Test***        
000012A0                            81  *BTST -  test memory from  <address1> to <address2>
000012A0                            82  * If completed w/o errors, display no error msg
000012A0                            83  * Else display error msg w/ address, the data stored & the data read of the failing memory.  
000012A0                            84     
000012A0                            85      
000012A0                            86  *No error msg    
000012A0= 4E 6F 20 45 72 72 ...     87  BTST_NO_ERR DC.B   'No Error Was Detected',0    
000012B6                            88  *Error MSg indicating the address, the data stored and the data read of the failing memory. 
000012B6= 4D 65 6D 6F 72 79 ...     89  ERR_ADDR    DC.B   'Memory problems found: $00000000'
000012D6= 0A 0D                     90  E_ERR_ADDR  DC.B   $A,$D 
000012D8= 54 68 65 20 64 61 ...     91  DTSTORE     DC.B   'The data stored: 00'
000012EB= 0A 0D                     92  E_DTSTORE   DC.B   $A,$D
000012ED= 54 68 65 20 64 61 ...     93  DTREAD      DC.B   'The data read: 00'
000012FE= 00                        94  E_DTREAD    DC.B   0
00001400                            95      ORG $1400
00001400                            96  BTST:   
00001400  48E7 C066                 97         MOVEM.L D0-D1/A1-A2/A5-A6,-(A7)
00001404                            98         *Obtain and store addr1 and addr2 in A5,A2 and A6 respectively
00001404  538C                      99         SUBA.L  #1, A4       ; Point to first byte of user input address 
00001406  121C                     100         MOVE.B  (A4)+,D1     ; First byte data from user input(A4 pointer)
00001408  0C01 0024                101         CMPI.B  #$24,D1      ; #$24 is '$', test if user input a valid address sign
0000140C  6600 00AA                102         BNE     ERR_BTST     ; INVALID Address for BTST
00001410  6100 FDEE                103         BSR     ASCIItoHEX   ; D1 has 1st address(ASCII)  
00001414  2A41                     104         MOVEA.L D1,A5        ; 1st HEX addr in A5 
00001416  2441                     105         MOVEA.L D1,A2        ; 1st HEX addr in A2 (For testing $55)
00001418  121C                     106         MOVE.B  (A4)+,D1     ; Store the next byte in D1 to check blank space
0000141A  0C01 0020                107         CMPI.B  #$20,D1      ; Check if user input blank space before Next address
0000141E  6600 0098                108         BNE     ERR_BTST     ; INVALID Command format for BTST       
00001422  121C                     109         MOVE.B  (A4)+,D1     ; One byte data from user input(A4 pointer)
00001424  0C01 0024                110         CMPI.B  #$24,D1      ; #$24 is '$', test if user input a valid address sign
00001428  6600 008E                111         BNE     ERR_BTST     ; INVALID Address for BTST
0000142C  6100 FDD2                112         BSR     ASCIItoHEX   ; D1 has 2nd address(ASCII)         
00001430  2C41                     113         MOVEA.L D1,A6        ; 2nd HEX addr in A6 
00001432                           114               
00001432                           115         *Fill all of the memory to be tested with $AA, then run read operation
00001432  4281                     116          CLR.L   D1          ; Clear D1 for storing byte data from memory
00001434                           117  LOOP_BTST1:                 
00001434  BDCD                     118          CMPA.L  A5,A6         ; Compare if A5 is at A6 (A6-A5), 
00001436                           119                                ; Compare first, incase user input same addresses
00001436  6F00 003C                120          BLE     BTST2         ; If A5 is at A6, go to to next loop
0000143A  1ABC 00AA                121          MOVE.B  #$AA,(A5)     ; Fill each byte of memory with $55
0000143E  121D                     122          MOVE.B  (A5)+,D1      ; Read the byte of memory
00001440  0C01 00AA                123          CMPI.B  #$AA,D1       ; Check if the contents is be $AA. 
00001444  67EE                     124          BEQ     LOOP_BTST1    ; If correct, continue loop for next byte
00001446                           125          
00001446                           126          *Display failing msg with address, data stored, data read of the failing memory.  
00001446  43F8 12FE                127          LEA     E_DTREAD,A1   ; Else,contents not $AA, problem in memory block
0000144A  6100 FDF2                128          BSR     HEXtoASCII    ; Convert data byte(HEX) read in mem and store it
0000144E  43F8 12EB                129          LEA     E_DTSTORE, A1 ; Store what system suppose to read
00001452  133C 0041                130          MOVE.B  #$41, -(A1)   ; Store ASCII 'A'
00001456  133C 0041                131          MOVE.B  #$41, -(A1)   ; Store ASCII 'A'     
0000145A  43F8 12D6                132          LEA     E_ERR_ADDR,A1 ; Store address of memory problem found     
0000145E  538D                     133          SUBA.L  #1, A5        ; Point to the error byte in memory location
00001460  220D                     134          MOVE.L  A5, D1        ; D1 now has the problem memory addr        
00001462  6100 FE0A                135          BSR     HEX8toASCII   ; Convert error addr into ASCII 
00001466  43F8 12B6                136          LEA     ERR_ADDR ,A1  ; Display complete BTST error msg    
0000146A  103C 000D                137          MOVE.B  #13, D0         
0000146E  4E4F                     138          TRAP    #15     
00001470  6000 0058                139          BRA     END_BTST      ; Go to the end of BTST
00001474                           140  
00001474                           141          *Fill all of the memory to be tested with $55, then run read operation
00001474  2A4A                     142  BTST2   MOVEA.L A2, A5        ; Restore A5 initial value
00001476  4281                     143          CLR.L   D1            ; Clear D1 for storing byte data from memory
00001478                           144  LOOP_BTST2:                 
00001478  BDCD                     145          CMPA.L  A5,A6         ; Compare if A5 is at A6 (A6-A5), 
0000147A  6F00 0044                146          BLE     NoErr_BTST      ; If A5 is at A6, go to to next loop
0000147E  1ABC 0055                147          MOVE.B  #$55,(A5)     ; Fill each byte of memory with $55
00001482  121D                     148          MOVE.B  (A5)+,D1      ; Read the byte of memory
00001484  0C01 0055                149          CMPI.B  #$55,D1       ; Check if the contents is be $AA. 
00001488  67EE                     150          BEQ     LOOP_BTST2    ; If correct, continue loop for next byte
0000148A                           151          
0000148A                           152          * Fill up all the error messages detail and display
0000148A  43F8 12FE                153          LEA     E_DTREAD,A1   ; Else,contents not $AA, problem in memory block
0000148E  6100 FDAE                154          BSR     HEXtoASCII    ; Convert data byte(HEX) read in mem and store it
00001492  43F8 12EB                155          LEA     E_DTSTORE, A1 ; Store what system suppose to read
00001496  133C 0035                156          MOVE.B  #$35, -(A1)   ; Store ASCII '5'
0000149A  133C 0035                157          MOVE.B  #$35, -(A1)   ; Store ASCII '5'     
0000149E  43F8 12D6                158          LEA     E_ERR_ADDR,A1 ; Store address of memory problem found     
000014A2  538D                     159          SUBA.L  #1, A5        ; Point to the error byte in memory location
000014A4  220D                     160          MOVE.L  A5, D1        ; D1 now has the problem memory addr        
000014A6  6100 FDC6                161          BSR     HEX8toASCII   ; Convert error addr into ASCII 
000014AA  43F8 12B6                162          LEA     ERR_ADDR ,A1  ; Display complete BTST error msg    
000014AE  103C 000D                163          MOVE.B  #13, D0         
000014B2  4E4F                     164          TRAP    #15     
000014B4  6000 0014                165          BRA     END_BTST       ; Go to the end of BTST
000014B8  6100 0016                166  ERR_BTST   BSR    CMD_INVALID  ; Go to invalid command subroutine
000014BC  6000 000C                167             BRA    END_BTST     ; End the subroutine     
000014C0  43F8 12A0                168  NoErr_BTST LEA  BTST_NO_ERR,A1 ; Display no error found msg
000014C4  103C 000D                169             MOVE.B  #13, D0         
000014C8  4E4F                     170             TRAP    #15 
000014CA  4CDF 6603                171  END_BTST   MOVEM.L (A7)+,D0-D1/A1-A2/A5-A6 ;Restore used Register
000014CE  4E75                     172             RTS
000014D0                           173          
000014D0                           174  *Prompt user when command is invalid
000014D0                           175  CMD_INVALID:
000014D0  48E7 8040                176         MOVEM.L D0/A1, -(A7)    ; Save REGs
000014D4  43F8 1000                177         LEA     INVALID_COM, A1 ; Display error message
000014D8  103C 000D                178         MOVE.B  #13,D0
000014DC  4E4F                     179         TRAP    #15
000014DE  4CDF 0201                180         MOVEM.L (A7)+,D0/A1     ; Restore REGs
000014E2  4E75                     181         RTS
000014E4                           182    
000014E4                           183  * Put variables and constants here
00002300                           184      ORG    $2300
00002300= 24 32 34 30 30 20 ...    185  TEST DC.B    '$2400 $240A ',0 ; Store testcase in input space
0000230D                           186  
00002000                           187      ORG $2000
00002000                           188  START:                  ; first instruction of program
00002000  287C 00002301            189      MOVEA.L #$2301, A4
00002006  6000 F3F8                190      BRA     BTST 
0000200A                           191         
0000200A                           192      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A2H_END             1226
ALPHA8TOA           1286
ALPHAORDIGIT        122E
ALPHATOA            1254
ASCIITOHEX          1200
ATOALPHA            1236
ATODIGIT            1238
ATOHEX2             1212
ATOHEX3             1216
BTST                1400
BTST2               1474
BTST_NO_ERR         12A0
CMD_INVALID         14D0
DIGIT8TOA           128E
DIGITTOA            125C
DTREAD              12ED
DTSTORE             12D8
END_BTST            14CA
ERR_ADDR            12B6
ERR_BTST            14B8
E_DTREAD            12FE
E_DTSTORE           12EB
E_ERR_ADDR          12D6
H2A_END             1268
H82A_END            129A
HEX8TOA2            1276
HEX8TOA3            1292
HEX8TOASCII         126E
HEXTOA2             1244
HEXTOA3             1260
HEXTOASCII          123E
INVALID_COM         1000
LOOP_BTST1          1434
LOOP_BTST2          1478
NOERR_BTST          14C0
START               2000
TEST                2300
